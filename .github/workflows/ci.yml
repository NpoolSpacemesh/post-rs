on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*'

name: CI

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --workspace --all-features

  test:
    name: Test Suite
    needs:
      - check
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies for testing openCL
        run: sudo apt-get install -y libpocl2 mesa-opencl-icd ocl-icd-opencl-dev
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --all-features
      - name: Test scrypt-ocl crate
        run: cargo test -p scrypt-ocl --all-features -- --test-threads=1
      - name: Test ffi crate
        run: cargo test -p post-cbindings --all-features -- --test-threads=1

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --workspace

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build library
    runs-on: ${{ matrix.os }}
    needs:
      - test
      - fmt
      - clippy
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            dylib: libpost.so
            staticlib: libpost.a
            artifact-name: linux

          - os: [self-hosted, linux, arm64]
            dylib: libpost.so
            staticlib: libpost.a
            rustflags: --cfg=aes_armv8
            artifact-name: linux-arm64

          - os: [self-hosted, macos, arm64]
            dylib: libpost.dylib
            staticlib: libpost.a
            rustflags: --cfg=aes_armv8
            artifact-name: macos-m1

          - os: macos-latest
            dylib: libpost.dylib
            staticlib: libpost.a
            artifact-name: macos

          - os: windows-latest
            dylib: post.dll
            staticlib: post.lib
            artifact-name: windows
    steps:
      - if: matrix.os == 'ubuntu-20.04'
        run: sudo apt-get install -y libpocl2 mesa-opencl-icd ocl-icd-opencl-dev
        name: Install opencl
      - if: matrix.os == 'windows-latest'
        name: Install opencl
        run: vcpkg install opencl
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ join( matrix.os, '-' ) }}

      - if: matrix.os == 'windows-latest'
        name: Download OpenCL.lib
        run: |
          pwd
          choco install -y wget unzip
          wget https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v2023.04.17/OpenCL-SDK-v2023.04.17-Win-x64.zip
          unzip -j OpenCL-SDK-v2023.04.17-Win-x64.zip OpenCL-SDK-v2023.04.17-Win-x64/lib/OpenCL.lib

      - name: Version suffix (for release only)
        id: version
        run: echo "suffix=${{ github.ref_type == 'tag' && '-' || ''}}${{ github.ref_type == 'tag' && github.ref || ''}}" >> $GITHUB_OUTPUT
      - name: Build clib
        run: cd ffi && cargo build --profile release-clib
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libpost-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            ffi/prover.h
            target/release-clib/${{ matrix.dylib }}
            target/release-clib/${{ matrix.staticlib }}
          if-no-files-found: error

      - name: Build profiler tool
        run: cd profiler && cargo build --release
      - name: Archive profiler artifacts
        uses: actions/upload-artifact@v3
        with:
          name: profiler-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            target/release/profiler${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          if-no-files-found: error

  release:
    name: Publish release
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: List artifacts
        run: ls -R ./artifacts
      - name: Create a draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Pack artifacts
        run: >
          mkdir ./assets;
          for dir in ./artifacts/*/; do
            zip -o -j -r "./assets/$(basename "$dir")-$TAG.zip" "$dir";
          done
        env:
          TAG: ${{ github.ref_name }}
      - name: Upload Release Assets
        run: gh release upload $TAG ./assets/*.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
